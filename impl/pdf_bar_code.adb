with Ada.Strings.Unbounded;             use Ada.Strings.Unbounded;

function PDF_Bar_Code (
  kind     : Bar_Codes.Kind_Of_Code;
  bounding : Bar_Codes.Box;           --  Box in which the bar code should fit
  text     : String                   --  Text to encode
)
return String
is
  use Bar_Codes;
  pdf_code : Unbounded_String;
  --
  type PBC is new Bar_Code with null record;
  overriding procedure Filled_Rectangle (bc : PBC; shape : Box) is
  pragma Unreferenced (bc);
  begin
    pdf_code := pdf_code &
      "    " &
      Img (shape.left)   & ' ' &
      Img (shape.bottom) & ' ' &
      Img (shape.width)  & ' ' &
      Img (shape.height) & " re" & ASCII.LF;
  end Filled_Rectangle;
  --
  bc : PBC;
begin
  bc.Draw (kind, bounding, text);
  return
    "%  Begin of Bar code" & ASCII.LF &
    "%    Automatically generated by " & Bar_Codes.title &
    " version " & Bar_Codes.version &
    ", " & Bar_Codes.reference &
    " @ " & Bar_Codes.web & ASCII.LF &
    "%    Bar code format: " & Bar_Codes.Kind_Of_Code'Image (kind) & ASCII.LF &
    "%    Text to be encoded: [" & Printable (text) & ']' & ASCII.LF &
    "%    This PDF snippet has to be included into a PDF document." & ASCII.LF &
    "%    For instance, use Insert_Graphics_PDF_Code of PDF_Out, http://apdf.sf.net/" & ASCII.LF &
    "q"   & ASCII.LF &  --  Save the current graphics state
    "0 g" & ASCII.LF &  --  Black
    To_String (pdf_code) &
    "f"   & ASCII.LF &  --  Paint the rectangles (fill)
    "Q"   & ASCII.LF &  --  Restore the graphics state
    "%  End of bar code" & ASCII.LF;
end PDF_Bar_Code;
